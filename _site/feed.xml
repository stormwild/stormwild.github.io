<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-05T20:30:24+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Stormwild (Alexander R. Torrijos)</title><subtitle>Stormwild (Alexander R. Torrijos)</subtitle><entry><title type="html">Flexbox Notes</title><link href="http://localhost:4000/flexbox-notes" rel="alternate" type="text/html" title="Flexbox Notes" /><published>2018-02-24T00:00:00+08:00</published><updated>2018-02-24T00:00:00+08:00</updated><id>http://localhost:4000/flexbox-notes</id><content type="html" xml:base="http://localhost:4000/flexbox-notes"><![CDATA[<p data-height="2381" data-theme-id="0" data-slug-hash="gvjMvm" data-default-tab="result" data-user="stormwild" data-embed-version="2" data-pen-title="Flexbox Samples" class="codepen">See the Pen <a href="https://codepen.io/stormwild/pen/gvjMvm/">Flexbox Samples</a> by Alexander R Torrijos (<a href="https://codepen.io/stormwild">@stormwild</a>) on <a href="https://codepen.io">CodePen</a>.</p>
<script async="" src="https://static.codepen.io/assets/embed/ei.js"></script>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Bootstrap 4 is released and it uses Flexbox. Time to get up to speed on this useful css module.]]></summary></entry><entry><title type="html">ASP .NET Core i18n notes</title><link href="http://localhost:4000/aspnetcore-i18n-notes" rel="alternate" type="text/html" title="ASP .NET Core i18n notes" /><published>2017-10-07T00:00:00+08:00</published><updated>2017-10-07T00:00:00+08:00</updated><id>http://localhost:4000/aspnetcore-i18n-notes</id><content type="html" xml:base="http://localhost:4000/aspnetcore-i18n-notes"><![CDATA[<p>DotNet Core is basically a console app running on the host os.</p>

<p>On Windows the regional setting affects the CultureInfo.CurrentCulture value in a console app.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Globalization</span><span class="p">;</span>

<span class="k">namespace</span> <span class="nn">Mosaic</span>
<span class="p">{</span>
    <span class="k">class</span> <span class="nc">Program</span>
    <span class="p">{</span>
        <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
        <span class="p">{</span>
            
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">CultureInfo</span><span class="p">.</span><span class="n">CurrentCulture</span><span class="p">);</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">ReadLine</span><span class="p">();</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This will display <code class="language-plaintext highlighter-rouge">en-US</code> if your regional settings on Windows is set to English US.</p>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Notes on internationalization in ASP .NET Core applications]]></summary></entry><entry><title type="html">Make</title><link href="http://localhost:4000/make" rel="alternate" type="text/html" title="Make" /><published>2017-09-20T00:00:00+08:00</published><updated>2017-09-20T00:00:00+08:00</updated><id>http://localhost:4000/make</id><content type="html" xml:base="http://localhost:4000/make"><![CDATA[<p>GNU Make is an automation tool for compiling and building applications and is part of the GNU Toolchain.</p>

<p>A <code class="language-plaintext highlighter-rouge">Makefile</code> tells <code class="language-plaintext highlighter-rouge">make</code> what to do, like how to compile and link a program.</p>

<blockquote>
  <p>To use Make to its full potential, you need to properly frame your desired results as build targets, their prerequisites (dependencies), and the recipe to turn those dependencies into the intended output. ie:</p>

  <div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Makefile
</span><span class="nl">htdocs/robots.txt</span><span class="o">:</span> <span class="nf">support-files/robots.txt</span>
        <span class="err">cp</span> <span class="err">support-files/robots.txt</span> <span class="err">htdocs/robots.txt</span>
</code></pre></div>  </div>
</blockquote>

<p>Makefiles are composed of rules which consist of build targets, their prerequisites (dependencies), and the recipes (commands) to produce the target.</p>

<p>Build Targets:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>htdocs/robots.txt: 
</code></pre></div></div>

<p>Prerequisites:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>support-files/robots.txt
</code></pre></div></div>

<p>Recipes (Commands):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp support-files/robots.txt htdocs/robots.txt
</code></pre></div></div>

<p>Note: Prerequisites can be targets of other rules</p>

<p>In the Makefile, the recipes are tab indented below the build target.</p>

<p>When <code class="language-plaintext highlighter-rouge">make</code> parses the <code class="language-plaintext highlighter-rouge">Makefile</code>, it reads the rules and detects if the source file has changed and if so re-generates the target.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://www3.ntu.edu.sg/home/ehchua/programming/cpp/gcc_make.html">GCC and Make</a></li>
  <li><a href="http://nuclear.mutantstargoat.com/articles/make/">Practical Makefiles, by example</a></li>
  <li><a href="https://www.sitepoint.com/using-gnu-make-front-end-development-build-tool/">Using GNU Make as a Front-end Development Build Tool</a></li>
  <li><a href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">GNU make</a></li>
  <li><a href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</a></li>
</ul>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[GNU Make is an automation tool for compiling and building applications and is part of the GNU Toolchain.]]></summary></entry><entry><title type="html">Flow</title><link href="http://localhost:4000/flow" rel="alternate" type="text/html" title="Flow" /><published>2017-09-02T00:00:00+08:00</published><updated>2017-09-02T00:00:00+08:00</updated><id>http://localhost:4000/flow</id><content type="html" xml:base="http://localhost:4000/flow"><![CDATA[<h2 id="notes-on-flow">Notes on <a href="https://flow.org/en/">Flow</a></h2>

<p>A copy paste of selections from the documentation.</p>

<blockquote>
  <p>Flow is a static type checker for your JavaScript code.</p>
</blockquote>

<p>You can write type annotations on your code to allow Flow to check your code for errors.</p>

<p>For example:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
    
<span class="p">}</span>

<span class="nx">square</span><span class="p">(</span><span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Error!</span>
</code></pre></div></div>

<h2 id="setup">Setup</h2>

<p>To allow Flow to check this code for type errors, configure your project to use Flow:</p>

<ol>
  <li>
    <p>Install Flow and a compiler to strip away type annotations</p>

    <p>Babel or flow-remove-types can be installed to remove the type annotations from your code.</p>

    <p>When using babel, install <code class="language-plaintext highlighter-rouge">babel-cli</code> and <code class="language-plaintext highlighter-rouge">babel-preset-flow</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm install babel-cli babel-preset-flow
</code></pre></div>    </div>

    <p>Add flow to your babel presets array in <code class="language-plaintext highlighter-rouge">.babelrc</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {
   "presets": ["flow"]
 }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add flow</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm install --save-dev flow-bin
</code></pre></div>    </div>

    <p>Add a flow script to your <code class="language-plaintext highlighter-rouge">package.json</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> {
   "name": "my-flow-project",
   "version": "1.0.0",
   "devDependencies": {
     "flow-bin": "^0.41.0"
   },
   "scripts": {
     "flow": "flow"
   }
 }
</code></pre></div>    </div>
  </li>
  <li>
    <p>Configure the project to use Flow</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm run flow init
</code></pre></div>    </div>

    <p>This creates a <a href="https://flow.org/en/docs/config/"><code class="language-plaintext highlighter-rouge">.flowconfig</code></a> file which allows you to configure and customize Flow such as the path to the code.</p>
  </li>
  <li>
    <p>Run flow to check for type errors</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm run flow
</code></pre></div>    </div>

    <p>This is equivalent to <code class="language-plaintext highlighter-rouge">flow status</code></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm run flow status
</code></pre></div>    </div>

    <p>Which runs flow as a background process.</p>

    <p>Only one instance of the background process regardless of how many times <code class="language-plaintext highlighter-rouge">flow status</code> is called</p>

    <p>To stop the background process</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> npm run flow stop
</code></pre></div>    </div>

    <p>Flow will check source code files for error if the file begins with flow flag:</p>

    <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// @flow</span>
 <span class="cm">/* @flow */</span>
</code></pre></div>    </div>

    <p>It will skip files without the flag unless <code class="language-plaintext highlighter-rouge">flow check --all</code> is called.</p>
  </li>
</ol>

<h2 id="writing-flow">Writing Flow</h2>

<p>You can now begin to write JavaScript code with type annotations.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>

<span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">x</span><span class="p">:</span> <span class="p">?</span><span class="nx">number</span><span class="p">):</span> <span class="nx">string</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="dl">"</span><span class="s2">default string</span><span class="dl">"</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>For the code above running flow will yield the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test.js:5
  5:     return x;
                ^ number. This type is incompatible with the expected return type of
  3: function foo(x: ?number): string {
                               ^^^^^^ string
</code></pre></div></div>

<h2 id="primitive-types">Primitive Types</h2>

<p>Primitive types can be literal values <code class="language-plaintext highlighter-rouge">true "hello" 3.14 null undefined</code> or constructed wrapper objects <code class="language-plaintext highlighter-rouge">new Boolean(false) new String("world")</code>.</p>

<p>Types for literal values are lowercase and wrapper objects are capitalized.</p>

<p>Boolean values need to be explicitly converted to boolean using <code class="language-plaintext highlighter-rouge">Boolean(x) or !!x</code>.</p>

<h2 id="maybe-types">Maybe Types</h2>

<p>Maybe types are for places where a value is optional and you can create them by adding a question mark in front of the type such as <code class="language-plaintext highlighter-rouge">?string</code> or <code class="language-plaintext highlighter-rouge">?number</code>.</p>

<h2 id="optional-object-properties">Optional Object Properties</h2>

<p>Object types can have optional properties where a question mark <code class="language-plaintext highlighter-rouge">?</code> comes after the property name.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span> <span class="nx">propertyName</span><span class="p">?:</span> <span class="nx">string</span> <span class="p">}</span>
</code></pre></div></div>

<p>In addition to their set value type, these optional properties can either be void or omitted altogether. However, they cannot be <code class="language-plaintext highlighter-rouge">null</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">acceptsObject</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="p">{</span> <span class="nx">foo</span><span class="p">?:</span> <span class="nx">string</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">acceptsObject</span><span class="p">({</span> <span class="na">foo</span><span class="p">:</span> <span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span> <span class="p">});</span>     <span class="c1">// Works!</span>
<span class="nx">acceptsObject</span><span class="p">({</span> <span class="na">foo</span><span class="p">:</span> <span class="kc">undefined</span> <span class="p">});</span> <span class="c1">// Works!</span>
<span class="nx">acceptsObject</span><span class="p">({</span> <span class="na">foo</span><span class="p">:</span> <span class="kc">null</span> <span class="p">});</span>      <span class="c1">// Error!</span>
<span class="nx">acceptsObject</span><span class="p">({});</span>                 <span class="c1">// Works!</span>
</code></pre></div></div>

<h2 id="optional-function-parameters">Optional function parameters</h2>

<p>Functions can have optional parameters where a question mark <code class="language-plaintext highlighter-rouge">?</code> comes after the parameter name.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">method</span><span class="p">(</span><span class="nx">param</span><span class="p">?:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</code></pre></div></div>

<p>In addition to their set type, these optional parameters can either be void or omitted altogether. However, they cannot be <code class="language-plaintext highlighter-rouge">null</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="nx">value</span><span class="p">?:</span> <span class="nx">string</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">);</span>     <span class="c1">// Works!</span>
<span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">// Works!</span>
<span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>      <span class="c1">// Error!</span>
<span class="nx">acceptsOptionalString</span><span class="p">();</span>          <span class="c1">// Works!</span>
</code></pre></div></div>

<h2 id="function-parameters-with-defaults">Function parameters with defaults</h2>

<p>Function parameters can also have defaults. This is a feature of ECMAScript 2015.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">method</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">default</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
</code></pre></div></div>

<p>In addition to their set type, default parameters can also be void or omitted altogether. However, they cannot be <code class="language-plaintext highlighter-rouge">null</code>.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="dl">"</span><span class="s2">bar</span><span class="dl">"</span><span class="p">);</span>     <span class="c1">// Works!</span>
<span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="kc">undefined</span><span class="p">);</span> <span class="c1">// Works!</span>
<span class="nx">acceptsOptionalString</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>      <span class="c1">// Error!</span>
<span class="nx">acceptsOptionalString</span><span class="p">();</span>          <span class="c1">// Works!</span>
</code></pre></div></div>

<h2 id="symbols">Symbols</h2>

<p>Symbols are not currently supported by Flow. You can see these two issues for more information:</p>

<ul>
  <li><a href="https://github.com/facebook/flow/issues/810">facebook/flow#810</a></li>
  <li><a href="https://github.com/facebook/flow/issues/1015">facebook/flow#1015</a></li>
</ul>

<h2 id="literal-types">Literal Types</h2>

<p>Using literal values as types</p>

<blockquote>
  <p>Flow has primitive types for literal values, but can also use literal values as types.</p>
</blockquote>

<blockquote>
  <p>For example, instead of accepting number type, we could accept only the literal value 2.</p>
</blockquote>

<blockquote>
  <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">acceptsTwo</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// ...</span>
<span class="p">}</span>

<span class="nx">acceptsTwo</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>   <span class="c1">// Works!</span>
<span class="c1">// $ExpectError</span>
<span class="nx">acceptsTwo</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>   <span class="c1">// Error!</span>
<span class="c1">// $ExpectError</span>
<span class="nx">acceptsTwo</span><span class="p">(</span><span class="dl">"</span><span class="s2">2</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Error!</span>
</code></pre></div>  </div>
</blockquote>

<blockquote>
  <p>Using these with union types is powerful:</p>
</blockquote>

<blockquote>
  <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">getColor</span><span class="p">(</span><span class="nx">name</span><span class="p">:</span> <span class="dl">"</span><span class="s2">success</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">warning</span><span class="dl">"</span> <span class="o">|</span> <span class="dl">"</span><span class="s2">danger</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">success</span><span class="dl">"</span> <span class="p">:</span> <span class="k">return</span> <span class="dl">"</span><span class="s2">green</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">warning</span><span class="dl">"</span> <span class="p">:</span> <span class="k">return</span> <span class="dl">"</span><span class="s2">yellow</span><span class="dl">"</span><span class="p">;</span>
    <span class="k">case</span> <span class="dl">"</span><span class="s2">danger</span><span class="dl">"</span>  <span class="p">:</span> <span class="k">return</span> <span class="dl">"</span><span class="s2">red</span><span class="dl">"</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">getColor</span><span class="p">(</span><span class="dl">"</span><span class="s2">success</span><span class="dl">"</span><span class="p">);</span> <span class="c1">// Works!</span>
<span class="nx">getColor</span><span class="p">(</span><span class="dl">"</span><span class="s2">danger</span><span class="dl">"</span><span class="p">);</span>  <span class="c1">// Works!</span>
<span class="c1">// $ExpectError</span>
<span class="nx">getColor</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">);</span>   <span class="c1">// Error!</span>
</code></pre></div>  </div>
</blockquote>

<h2 id="mixed-types">Mixed Types</h2>

<p>A single type:</p>

<p>Here the input value can only be a number.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">square</span><span class="p">(</span><span class="nx">n</span><span class="p">:</span> <span class="nx">number</span><span class="p">):</span> <span class="nx">number</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">n</span> <span class="o">*</span> <span class="nx">n</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A group of different possible types:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">stringifyBasicValue</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">string</span> <span class="o">|</span> <span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="dl">''</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>A type based on another type:</p>

<p>Here the return type will be the same as the type of whatever value is passed into the function.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">identity</span><span class="o">&lt;</span><span class="nx">T</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">T</span><span class="p">):</span> <span class="nx">T</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>These three are the most common categories of types. They will make up the majority of the types you’ll be writing.</p>

<p>However, there is also a fourth category.</p>

<p>An arbitrary type that could be anything:</p>

<p>Here the passed in value is an unknown type, it could be any type and the function would still work.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getTypeOf</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">mixed</span><span class="p">):</span> <span class="nx">string</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">typeof</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>When you try to use a value of a <code class="language-plaintext highlighter-rouge">mixed</code> type you must first figure out what the actual type is or you’ll end up with an error.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">stringify</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">mixed</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// $ExpectError</span>
  <span class="k">return</span> <span class="dl">""</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span> <span class="c1">// Error!</span>
<span class="p">}</span>

<span class="nx">stringify</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>Instead you must ensure the value is a certain type by refining it.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// @flow</span>
<span class="kd">function</span> <span class="nx">stringify</span><span class="p">(</span><span class="nx">value</span><span class="p">:</span> <span class="nx">mixed</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">value</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">string</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">""</span> <span class="o">+</span> <span class="nx">value</span><span class="p">;</span> <span class="c1">// Works!</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="dl">""</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="nx">stringify</span><span class="p">(</span><span class="dl">"</span><span class="s2">foo</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>Because of the <code class="language-plaintext highlighter-rouge">typeof value === 'string'</code> check, Flow knows the <code class="language-plaintext highlighter-rouge">value</code> can only be a <code class="language-plaintext highlighter-rouge">string</code> inside of the <code class="language-plaintext highlighter-rouge">if</code> statement. This is known as a <a href="https://flow.org/en/docs/lang/refinements/">refinement</a>.</p>

<h2 id="references">References</h2>

<ul>
  <li><a href="https://flow.org/en/">Flow</a></li>
  <li><a href="https://flow.org/en/docs/install/">Install Flow</a></li>
</ul>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Flow is a static type checker for your JavaScript code.]]></summary></entry><entry><title type="html">PHP7 Zero Day Exploits Found</title><link href="http://localhost:4000/php7-zero-day-exploits-found" rel="alternate" type="text/html" title="PHP7 Zero Day Exploits Found" /><published>2017-01-01T00:00:00+08:00</published><updated>2017-01-01T00:00:00+08:00</updated><id>http://localhost:4000/php7-zero-day-exploits-found</id><content type="html" xml:base="http://localhost:4000/php7-zero-day-exploits-found"><![CDATA[<p><a href="http://thehackernews.com/">The Hacker News</a> reported <a href="http://thehackernews.com/2016/12/php-7-update.html">Zero Day exploits found in PHP7</a>.</p>

<blockquote>
  <p>The critical vulnerabilities reside in the unserialized mechanism in PHP 7 – the same mechanism that was found to be vulnerable in PHP 5 as well, allowing hackers to compromise Drupal, Joomla, Magento, vBulletin and PornHub websites and other web servers in the past years by sending maliciously crafted data in client cookies.[1]</p>
</blockquote>

<blockquote>
  <p>unserialize is a dangerous function. It has been proven over and over in the last years, yet it is still used in the wild. [2]</p>
</blockquote>

<p>Resources:</p>

<ol>
  <li><a href="http://thehackernews.com/2016/12/php-7-update.html" target="_blank">3 Critical Zero-Day Flaws Found in PHP 7 — One Remains Unpatched!</a></li>
  <li><a href="http://blog.checkpoint.com/wp-content/uploads/2016/08/Exploiting-PHP-7-unserialize-Report-160829.pdf" target="_blank">Exploiting PHP-7
unserialize (pdf)</a></li>
  <li><a href="http://php.net/manual/en/function.unserialize.php" target="_blank">unserialize</a></li>
  <li><a href="http://blog.checkpoint.com/wp-content/uploads/2016/12/PHP_Technical_Report.pdf" target="_blank">CHECK POINT DISCLOSES 3 PHP 0-DAYS (pdf)</a></li>
  <li><a href="https://lab.dsst.io/slides/33c3/7858.html" target="_blank">Exploiting PHP7 unserialize (slides)</a></li>
</ol>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[The Hacker News reported Zero Day exploits found in PHP7. The critical vulnerabilities reside in the unserialized mechanism in PHP 7 – the same mechanism that was found to be vulnerable in PHP 5 as well, allowing hackers to compromise Drupal, Joomla, Magento, vBulletin and PornHub websites and other web servers in the past years by sending maliciously crafted data in client cookies.[1] unserialize is a dangerous function. It has been proven over and over in the last years, yet it is still used in the wild. [2] Resources: 3 Critical Zero-Day Flaws Found in PHP 7 — One Remains Unpatched! Exploiting PHP-7 unserialize (pdf) unserialize CHECK POINT DISCLOSES 3 PHP 0-DAYS (pdf) Exploiting PHP7 unserialize (slides)]]></summary></entry><entry><title type="html">PHPExcel Notes</title><link href="http://localhost:4000/phpexcel-notes" rel="alternate" type="text/html" title="PHPExcel Notes" /><published>2016-09-23T00:00:00+08:00</published><updated>2016-09-23T00:00:00+08:00</updated><id>http://localhost:4000/phpexcel-notes</id><content type="html" xml:base="http://localhost:4000/phpexcel-notes"><![CDATA[<p>Notes from initial research on <a href="https://github.com/PHPOffice/PHPExcel">PHPExcel</a>.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="nv">$excel</span> <span class="o">=</span> <span class="n">PHPExcel_IOFactory</span><span class="o">::</span><span class="nf">load</span><span class="p">(</span><span class="nv">$full_path</span><span class="p">);</span>

<span class="nv">$worksheet</span> <span class="o">=</span> <span class="nv">$excel</span><span class="o">-&gt;</span><span class="nf">getActiveSheet</span><span class="p">();</span>

<span class="nv">$sheetCount</span> <span class="o">=</span> <span class="nv">$excel</span><span class="o">-&gt;</span><span class="nf">getSheetCount</span><span class="p">();</span>

<span class="nv">$sheetNames</span> <span class="o">=</span> <span class="nv">$excel</span><span class="o">-&gt;</span><span class="nf">getSheetNames</span><span class="p">();</span>

<span class="nv">$datasheet</span> <span class="o">=</span> <span class="nv">$excel</span><span class="o">-&gt;</span><span class="nf">getSheetByName</span><span class="p">(</span><span class="s1">'data'</span><span class="p">);</span> <span class="c1">// returns null if name does not exist</span>
</code></pre></div></div>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Notes from initial research on PHPExcel. &lt;?php $excel = PHPExcel_IOFactory::load($full_path); $worksheet = $excel-&gt;getActiveSheet(); $sheetCount = $excel-&gt;getSheetCount(); $sheetNames = $excel-&gt;getSheetNames(); $datasheet = $excel-&gt;getSheetByName('data'); // returns null if name does not exist]]></summary></entry><entry><title type="html">AWS VPC Notes</title><link href="http://localhost:4000/aws-vpc-notes" rel="alternate" type="text/html" title="AWS VPC Notes" /><published>2016-09-12T00:00:00+08:00</published><updated>2016-09-12T00:00:00+08:00</updated><id>http://localhost:4000/aws-vpc-notes</id><content type="html" xml:base="http://localhost:4000/aws-vpc-notes"><![CDATA[<p>Notes from initial research on VPC</p>

<h1 id="amazon-virtual-private-cloud">Amazon Virtual Private Cloud</h1>

<h2 id="ec2">EC2</h2>

<p>In 2006 Amazon EC2 was launched.</p>

<ul>
  <li>1 Public IP adddress(/Elastic IP)</li>
  <li>DNS hostname</li>
  <li>Security Group Ingress Filtering</li>
</ul>

<p>Later they also provided</p>

<ul>
  <li>Private IP addresses</li>
  <li>Internal DNS hostname to each instance</li>
</ul>

<p>In 2009 Amazon VPC was launched.</p>

<p>In 2011 marked enhancements to EC2.</p>

<ul>
  <li>Security Group now provided ingress and egress filtering</li>
  <li>Direct Internet connectivity</li>
  <li>Routing Tables</li>
  <li>Network ACLS to controll traffic between subnets</li>
</ul>

<p>The same year also saw updates to VPC.</p>

<ul>
  <li>Multiple IP addresses</li>
  <li>Multiple network interfaces</li>
  <li>Dedicated instances</li>
  <li>Statically Routed VPN connections</li>
</ul>

<p>March 2013 saw the launch of default VPC to EC2.</p>

<ul>
  <li>Automatically provisioned VPC were called default VPC</li>
  <li>DNS Hostnames</li>
  <li>DNS name resolution</li>
  <li>ElasticCache</li>
  <li>RDS IP Addresses</li>
</ul>

<h2 id="vpc">VPC</h2>

<h3 id="notes-from-the-aws-reinvent-video">Notes from the AWS ReInvent video</h3>

<h3 id="subnet">Subnet</h3>

<ul>
  <li>Create a subnet in all availability zones(AZ) in a region</li>
  <li>For example: <img src="uploads/aws-vpc-fig-1.png" alt="Subnet in AZ" title="AWS VPC: Assign Subnets to Each AZ" /></li>
  <li>Multiple subnets in each AZ</li>
  <li>Enable auto assignment of public ip address to any EC2 instance launched in the VPC</li>
</ul>

<h3 id="route">Route</h3>

<ul>
  <li>Each VPC comes with a default <a href="https://en.wikipedia.org/wiki/Routing_table">Routing Table (RIB)</a></li>
  <li>Assign different Routing Tables to each subnet</li>
  <li>Default Route Table has one rule <code class="language-plaintext highlighter-rouge">172.31.0.0/16 local active</code> which means that connections from EC2 instances in the VPC are routed locally.</li>
</ul>

<h3 id="internet-gateway">Internet Gateway</h3>

<ul>
  <li>An Internet Gateway is a resource you can create an attached to your VPC</li>
  <li>“A thing you send packets to if you want them to go to the internet”</li>
  <li>In your Route Table create a rule as shown: <code class="language-plaintext highlighter-rouge">0.0.0.0/0 igw-3376c756</code></li>
  <li>In a Route Table the more specific rule that can be applied dominates</li>
  <li>“Q: What is an Internet Gateway? Is it a router, a thing within the Amazon Data Center? Is it a single point of failure? A: It is a thing. It’s a highly available lots of things that gets traffic from the internet to your VPC. It’s an abstraction that just works.”</li>
</ul>

<h3 id="authorizing-traffic-network-acls-security-groups">Authorizing Traffic: Network ACLs Security Groups</h3>

<h4 id="network-acls">Network ACLs</h4>

<ul>
  <li>In a traditional network, Network ACLs are analogous to stateless firewall rules.</li>
  <li>The rules in a network acl gets applied in the order specified, ex. 100 (Rule #) All Traffic(Type) All (Protocol) All(Port) 0.0.0.0/0 (Port Range) Allow (Allow\Deny)</li>
  <li>You can transfer rules from your network firewall to network acls</li>
</ul>

<h4 id="security-groups">Security Groups</h4>

<ul>
  <li>Architect your security groups the way you architect your applications</li>
  <li>For example you have instances that act as web servers and instances that function as your backend applications/database servers.</li>
  <li>You would want internet traffic to be available to your web servers but not to your backend instances.</li>
  <li>Your backend instances should only allow connections from your web server instances.</li>
</ul>

<p>Example Rule:</p>

<p>For the web server instances</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type      Protocol    Port    Source 
HTTP<span class="o">(</span>80<span class="o">)</span>  TCP         80      0.0.0.0/0
</code></pre></div></div>

<p>For the backend services</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Type            Protocol    Port    Source 
Custom Rule     TCP         2365    sg-123456
</code></pre></div></div>

<p>Note:</p>

<ul>
  <li>You can reference another security group as source of this rule. In the above example sg-12345 is the security group applied to the webservers. In an elastic setup where you are adding and removing web server instances this rules applies to any instances that are assigned to the specified security group.</li>
  <li>Ingress (inbound), egress (outbound) rules can be defined</li>
  <li>Best Practice is to reference other security groups as show in the backend rule above.</li>
  <li>In practice there is a 1:1 relationship between an IAM role and a security group.</li>
</ul>

<h3 id="connectivity-options-for-vpc-aside-from-just-internet-connections">Connectivity Options for VPC (aside from just internet connections)</h3>

<p>Three examples</p>

<ul>
  <li>Subnet routing</li>
  <li>Connecting to other VPCs</li>
  <li>Connecting to your corporate network</li>
</ul>

<h4 id="subnet-routing">Subnet Routing</h4>

<ul>
  <li>Private Subnet(Internal) - Subnet without connection to the internet</li>
  <li>Public Subnet(Internet connected) - Subnet with a connection to the internet</li>
</ul>

<p>In the example given above you can put your web server instances and backend servers into different subnets. In one subnet you can have a route to the internet and the other subnet has no route to the internet. This allows you to be sure that your backend end instances will have no way of being accessible from the internet. It may happen that you may want to allow internet traffic to your backend servers. What you can then do is setup an EC2 instance on the internet connected subnet and have it function as a <a href="https://en.wikipedia.org/wiki/Network_address_translation">NAT (Network address translation)</a>. Then your backend subnet can have a route of 0.0.0.0/0 to your NAT EC2 instance which is on your public subnet. Instead of manually setting up your NAT EC2 instance, there is already a NAT AMI for that (amzn-ami-vpc-nat).</p>

<h4 id="connecting-to-other-vpcs-vpc-peering">Connecting to other VPCs: VPC Peering</h4>

<p>There are some scenarios which you may want to run multiple VPCs.</p>

<p>In a large corporate network you may want to give individual teams their own VPC. But you also have commone/core services (such as scanning, logging, monitoring, authentication) in which all teams would have access to.</p>

<ul>
  <li>Initiate a peering request</li>
  <li>Accept a peering request</li>
  <li>Create routes from one to the other</li>
</ul>

<h4 id="connecting-to-your-network-aws-hardware-vpn-aws-direct-connect">Connecting to your network: AWS Hardware VPN, AWS Direct Connect</h4>

<p>Extend your network to your VPC</p>

<ul>
  <li>VPN</li>
  <li>Direct Connect</li>
</ul>

<h5 id="vpn">VPN</h5>

<p>A VPN consists of a Customer Gateway which is a network device on one end of the VPN connection and a Virtual Gateway on the VPC side of the VPN connection.</p>

<p>Once you have these setup you get a pair of IPSEC tunnels.</p>

<p>On your VPC create a route to your Corporate Data Center.</p>

<h5 id="direct-connect">Direct Connect</h5>

<p>A dedicated line with lower per GB data transfer rates
For highest availability use both</p>

<h3 id="dns-in-a-vpc">DNS in a VPC</h3>

<p>In your VPC settings:</p>

<ul>
  <li>DNS resolution: yes</li>
  <li>DNS hostnames: yes</li>
</ul>

<p>Note: When set to yes, your VPC uses Amazon DNS servers</p>

<p>EC2 instances in a VPC using Amazon DNS gets two hostnames:</p>

<ul>
  <li>Internet DNS hostname <code class="language-plaintext highlighter-rouge">ip-12345</code> which resolves to your instances private ip address</li>
  <li>External DNS name when access from the internet resolves to the public ip and when accessed from within the VPC resolves to the private ip.</li>
</ul>

<p>Amazon Route 53 can allow you to create private hosted zones
Private hosted zone - your own world of dns in your VPC
Basically you can create a private hosted zone assign it to your VPC and map a domain name to an ip address within your vpc.</p>

<p>VPC Flow Logs</p>

<p>Full meta data dump of all packets to your EC2 instances, not only the packets that succeed but also the packets your security groups are rejecting.</p>

<p>Amazon VPC Endpoints for S3</p>

<p>A wormhole from your VPC to your S3</p>

<p>Resources:</p>

<ul>
  <li><a href="https://youtu.be/5_bQ6Dgk6k8">AWS re:Invent 2015 - VPC Fundamentals and Connectivity Options</a></li>
  <li><a href="https://youtu.be/B8vnhRJDujw">Deep Dive: Amazon Virtual Private Cloud</a></li>
  <li><a href="https://dzone.com/articles/aws-vpc-networking-beginners">AWS - VPC Networking for Beginners</a></li>
  <li><a href="http://cloudacademy.com/blog/how-and-why-to-use-vpc-for-your-amazon-aws-infrastructure/">Amazon VPC: 5 reasons to use and learn it… with Cloud Academy!</a></li>
  <li><a href="https://aws.amazon.com/documentation/vpc/">Amazon Virtual Private Cloud Documentation</a></li>
</ul>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Notes from initial research on VPC Amazon Virtual Private Cloud EC2 In 2006 Amazon EC2 was launched. 1 Public IP adddress(/Elastic IP) DNS hostname Security Group Ingress Filtering Later they also provided Private IP addresses Internal DNS hostname to each instance In 2009 Amazon VPC was launched. In 2011 marked enhancements to EC2. Security Group now provided ingress and egress filtering Direct Internet connectivity Routing Tables Network ACLS to controll traffic between subnets The same year also saw updates to VPC. Multiple IP addresses Multiple network interfaces Dedicated instances Statically Routed VPN connections March 2013 saw the launch of default VPC to EC2. Automatically provisioned VPC were called default VPC DNS Hostnames DNS name resolution ElasticCache RDS IP Addresses VPC Notes from the AWS ReInvent video Subnet Create a subnet in all availability zones(AZ) in a region For example: Multiple subnets in each AZ Enable auto assignment of public ip address to any EC2 instance launched in the VPC Route Each VPC comes with a default Routing Table (RIB) Assign different Routing Tables to each subnet Default Route Table has one rule 172.31.0.0/16 local active which means that connections from EC2 instances in the VPC are routed locally. Internet Gateway An Internet Gateway is a resource you can create an attached to your VPC “A thing you send packets to if you want them to go to the internet” In your Route Table create a rule as shown: 0.0.0.0/0 igw-3376c756 In a Route Table the more specific rule that can be applied dominates “Q: What is an Internet Gateway? Is it a router, a thing within the Amazon Data Center? Is it a single point of failure? A: It is a thing. It’s a highly available lots of things that gets traffic from the internet to your VPC. It’s an abstraction that just works.” Authorizing Traffic: Network ACLs Security Groups Network ACLs In a traditional network, Network ACLs are analogous to stateless firewall rules. The rules in a network acl gets applied in the order specified, ex. 100 (Rule #) All Traffic(Type) All (Protocol) All(Port) 0.0.0.0/0 (Port Range) Allow (Allow\Deny) You can transfer rules from your network firewall to network acls Security Groups Architect your security groups the way you architect your applications For example you have instances that act as web servers and instances that function as your backend applications/database servers. You would want internet traffic to be available to your web servers but not to your backend instances. Your backend instances should only allow connections from your web server instances. Example Rule: For the web server instances Type Protocol Port Source HTTP(80) TCP 80 0.0.0.0/0 For the backend services Type Protocol Port Source Custom Rule TCP 2365 sg-123456 Note: You can reference another security group as source of this rule. In the above example sg-12345 is the security group applied to the webservers. In an elastic setup where you are adding and removing web server instances this rules applies to any instances that are assigned to the specified security group. Ingress (inbound), egress (outbound) rules can be defined Best Practice is to reference other security groups as show in the backend rule above. In practice there is a 1:1 relationship between an IAM role and a security group. Connectivity Options for VPC (aside from just internet connections) Three examples Subnet routing Connecting to other VPCs Connecting to your corporate network Subnet Routing Private Subnet(Internal) - Subnet without connection to the internet Public Subnet(Internet connected) - Subnet with a connection to the internet In the example given above you can put your web server instances and backend servers into different subnets. In one subnet you can have a route to the internet and the other subnet has no route to the internet. This allows you to be sure that your backend end instances will have no way of being accessible from the internet. It may happen that you may want to allow internet traffic to your backend servers. What you can then do is setup an EC2 instance on the internet connected subnet and have it function as a NAT (Network address translation). Then your backend subnet can have a route of 0.0.0.0/0 to your NAT EC2 instance which is on your public subnet. Instead of manually setting up your NAT EC2 instance, there is already a NAT AMI for that (amzn-ami-vpc-nat). Connecting to other VPCs: VPC Peering There are some scenarios which you may want to run multiple VPCs. In a large corporate network you may want to give individual teams their own VPC. But you also have commone/core services (such as scanning, logging, monitoring, authentication) in which all teams would have access to. Initiate a peering request Accept a peering request Create routes from one to the other Connecting to your network: AWS Hardware VPN, AWS Direct Connect Extend your network to your VPC VPN Direct Connect VPN A VPN consists of a Customer Gateway which is a network device on one end of the VPN connection and a Virtual Gateway on the VPC side of the VPN connection. Once you have these setup you get a pair of IPSEC tunnels. On your VPC create a route to your Corporate Data Center. Direct Connect A dedicated line with lower per GB data transfer rates For highest availability use both DNS in a VPC In your VPC settings: DNS resolution: yes DNS hostnames: yes Note: When set to yes, your VPC uses Amazon DNS servers EC2 instances in a VPC using Amazon DNS gets two hostnames: Internet DNS hostname ip-12345 which resolves to your instances private ip address External DNS name when access from the internet resolves to the public ip and when accessed from within the VPC resolves to the private ip. Amazon Route 53 can allow you to create private hosted zones Private hosted zone - your own world of dns in your VPC Basically you can create a private hosted zone assign it to your VPC and map a domain name to an ip address within your vpc. VPC Flow Logs Full meta data dump of all packets to your EC2 instances, not only the packets that succeed but also the packets your security groups are rejecting. Amazon VPC Endpoints for S3 A wormhole from your VPC to your S3 Resources: AWS re:Invent 2015 - VPC Fundamentals and Connectivity Options Deep Dive: Amazon Virtual Private Cloud AWS - VPC Networking for Beginners Amazon VPC: 5 reasons to use and learn it… with Cloud Academy! Amazon Virtual Private Cloud Documentation]]></summary></entry><entry><title type="html">Awesome Gulp Tutorials</title><link href="http://localhost:4000/awesome-gulp-tutorials" rel="alternate" type="text/html" title="Awesome Gulp Tutorials" /><published>2016-05-09T00:00:00+08:00</published><updated>2016-05-09T00:00:00+08:00</updated><id>http://localhost:4000/awesome-gulp-tutorials</id><content type="html" xml:base="http://localhost:4000/awesome-gulp-tutorials"><![CDATA[<p><a href="https://css-tricks.com/gulp-for-beginners/">Gulp for Beginners</a></p>

<p><a href="http://www.sitepoint.com/simple-gulpy-workflow-sass/">A Simple Gulp’y Workflow For Sass</a></p>

<p><a href="https://scotch.io/tutorials/automate-your-tasks-easily-with-gulp-js">Automate Your Tasks Easily with Gulp.js</a></p>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Gulp for Beginners A Simple Gulp’y Workflow For Sass Automate Your Tasks Easily with Gulp.js]]></summary></entry><entry><title type="html">Jekyll Permalinks and Redirects</title><link href="http://localhost:4000/jekyll-permalinks-and-redirects" rel="alternate" type="text/html" title="Jekyll Permalinks and Redirects" /><published>2016-03-24T00:00:00+08:00</published><updated>2016-03-24T00:00:00+08:00</updated><id>http://localhost:4000/jekyll-permalinks-redirects</id><content type="html" xml:base="http://localhost:4000/jekyll-permalinks-and-redirects"><![CDATA[<p>I recently changed the permalinks for my blog posts in my Github Jekyll Blog. I also added redirects from the previous urls to the new one.</p>

<p>By default blog post urls are prepended with the filename date.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2014/12/14/working-with-jekyll/
</code></pre></div></div>

<p>To create a new permalink just add the permalink in the front matter of the post.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
permalink: working-with-jekyll
---
</code></pre></div></div>

<p>However I also wanted to have the older links redirect to the new permalink of the post.</p>

<p>To do that I used the jekyll-redirect-from plugin. Just follow the <a href="https://github.com/jekyll/jekyll-redirect-from#installation">installation steps</a>.</p>

<p>And in your post frontmatter:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---
title: Working With Jekyll
permalink: working-with-jekyll
redirect_from: 2014/12/14/working-with-jekyll/
---
</code></pre></div></div>

<p>References</p>

<ol>
  <li><a href="http://stackoverflow.com/questions/27099427/jekyll-filename-without-date">Jekyll Filename Without Date</a></li>
  <li><a href="http://stackoverflow.com/questions/10178304/github-jekyll-old-pages-redirection-best-approach/19717455#19717455">Github - Jekyll - Old pages redirection - best approach</a></li>
  <li><a href="https://github.com/jekyll/jekyll-redirect-from">JekyllRedirectFrom</a></li>
  <li><a href="https://help.github.com/articles/redirects-on-github-pages/">Redirects on GitHub Pages</a></li>
</ol>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[I recently changed the permalinks for my blog posts in my Github Jekyll Blog. I also added redirects from the previous urls to the new one. By default blog post urls are prepended with the filename date. 2014/12/14/working-with-jekyll/ To create a new permalink just add the permalink in the front matter of the post. --- permalink: working-with-jekyll --- However I also wanted to have the older links redirect to the new permalink of the post. To do that I used the jekyll-redirect-from plugin. Just follow the installation steps. And in your post frontmatter: --- title: Working With Jekyll permalink: working-with-jekyll redirect_from: 2014/12/14/working-with-jekyll/ --- References Jekyll Filename Without Date Github - Jekyll - Old pages redirection - best approach JekyllRedirectFrom Redirects on GitHub Pages]]></summary></entry><entry><title type="html">Running Jekyll Github Pages on Cloud9</title><link href="http://localhost:4000/running-jekyll-github-pages-on-cloud9" rel="alternate" type="text/html" title="Running Jekyll Github Pages on Cloud9" /><published>2015-12-24T00:00:00+08:00</published><updated>2015-12-24T00:00:00+08:00</updated><id>http://localhost:4000/running-jekyll-github-pages-on-cloud9</id><content type="html" xml:base="http://localhost:4000/running-jekyll-github-pages-on-cloud9"><![CDATA[<p>Develop and run your <a href="https://help.github.com/articles/using-jekyll-with-pages/">Jekyll Github Pages</a> on <a href="https://c9.io/?redirect=0">Cloud9</a></p>

<h2 id="create-a-new-workspace">Create a new workspace</h2>

<p>Create a new workspace using either a custom template or the ruby template.</p>

<p>If you choose the Ruby template you need to delete the default rails project in the workspace directory or delete the directory.</p>

<p>A workspace folder will be recreated with a hidden .c9 folder.</p>

<p>Git is configured to ignore this folder.</p>

<h2 id="install-jekyll-and-github-pages">Install Jekyll and Github Pages</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gem <span class="nb">install </span>jekyll github-pages
</code></pre></div></div>

<h2 id="initial-git-repository-on-workspace-folder">Initial Git Repository on Workspace Folder</h2>

<p>Initial a git repository in the workspace folder.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git init
</code></pre></div></div>

<p>Add your github pages repository as remote.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git remote add origin &lt;your repository&gt;
</code></pre></div></div>

<p>Pull from the remote.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git pull origin master
</code></pre></div></div>

<h2 id="run-the-jekyll-server">Run the Jekyll Server</h2>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>jekyll serve <span class="nt">--host</span> <span class="nv">$IP</span> <span class="nt">--port</span> <span class="nv">$PORT</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">$IP</code> and <code class="language-plaintext highlighter-rouge">$PORT</code> provide the environment’s host ip and port.</p>]]></content><author><name>Alexander R. Torrijos</name></author><summary type="html"><![CDATA[Develop and run your Jekyll Github Pages on Cloud9 Create a new workspace Create a new workspace using either a custom template or the ruby template. If you choose the Ruby template you need to delete the default rails project in the workspace directory or delete the directory. A workspace folder will be recreated with a hidden .c9 folder. Git is configured to ignore this folder. Install Jekyll and Github Pages $ gem install jekyll github-pages Initial Git Repository on Workspace Folder Initial a git repository in the workspace folder. $ git init Add your github pages repository as remote. $ git remote add origin &lt;your repository&gt; Pull from the remote. $ git pull origin master Run the Jekyll Server $ jekyll serve --host $IP --port $PORT $IP and $PORT provide the environment’s host ip and port.]]></summary></entry></feed>